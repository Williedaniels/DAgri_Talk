name: Enhanced DevSecOps Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  SECURITY_SCAN_RESULTS_PATH: security-reports

jobs:
  # ============================================================================
  # COMPREHENSIVE SECURITY SCANNING
  # ============================================================================
  
  security-comprehensive:
    name: 🔒 Comprehensive Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Create security reports directory
      run: mkdir -p ${{ env.SECURITY_SCAN_RESULTS_PATH }}

    # ========================================================================
    # STATIC APPLICATION SECURITY TESTING (SAST)
    # ========================================================================
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:javascript,python"

    # ========================================================================
    # DEPENDENCY VULNERABILITY SCANNING
    # ========================================================================
    
    - name: Set up Python for backend security
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep

    - name: Python dependency security check with Safety
      run: |
        cd backend
        safety check --json --output ${{ github.workspace }}/${{ env.SECURITY_SCAN_RESULTS_PATH }}/safety-report.json || true
        safety check --short-report || true

    - name: Python security analysis with Bandit
      run: |
        cd backend
        bandit -r app/ -f json -o ${{ github.workspace }}/${{ env.SECURITY_SCAN_RESULTS_PATH }}/bandit-report.json || true
        bandit -r app/ -f txt || true

    - name: Python security analysis with Semgrep
      run: |
        cd backend
        semgrep --config=auto --json --output=${{ github.workspace }}/${{ env.SECURITY_SCAN_RESULTS_PATH }}/semgrep-backend.json app/ || true
        semgrep --config=auto app/ || true

    - name: Set up Node.js for frontend security
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Node.js dependency security audit
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > ${{ github.workspace }}/${{ env.SECURITY_SCAN_RESULTS_PATH }}/npm-audit.json || true
        npm audit --audit-level=moderate || true

    - name: Frontend security analysis with ESLint Security
      run: |
        cd frontend
        npm install eslint-plugin-security --save-dev
        npx eslint src/ --ext .js,.jsx,.ts,.tsx -f json -o ${{ github.workspace }}/${{ env.SECURITY_SCAN_RESULTS_PATH }}/eslint-security.json || true

    # ========================================================================
    # SECRETS SCANNING
    # ========================================================================
    
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified --json > ${{ env.SECURITY_SCAN_RESULTS_PATH }}/trufflehog-secrets.json || true

    - name: GitLeaks secrets scanning
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

    # ========================================================================
    # INFRASTRUCTURE SECURITY SCANNING
    # ========================================================================
    
    - name: Terraform security scan with Checkov
      run: |
        pip install checkov
        checkov -d terraform/ --framework terraform --output json --output-file ${{ env.SECURITY_SCAN_RESULTS_PATH }}/checkov-terraform.json || true
        checkov -d terraform/ --framework terraform || true

    - name: Docker security scan with Hadolint
      run: |
        docker run --rm -i hadolint/hadolint < backend/Dockerfile > ${{ env.SECURITY_SCAN_RESULTS_PATH }}/hadolint-backend.txt || true
        docker run --rm -i hadolint/hadolint < frontend/Dockerfile > ${{ env.SECURITY_SCAN_RESULTS_PATH }}/hadolint-frontend.txt || true

    # ========================================================================
    # CONTAINER IMAGE SECURITY SCANNING
    # ========================================================================
    
    - name: Build images for security scanning
      run: |
        docker build -t dagri-talk-backend:security-scan ./backend
        docker build -t dagri-talk-frontend:security-scan ./frontend

    - name: Comprehensive container scanning with Trivy
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

        # Scan backend container
        trivy image --format json --output ${{ env.SECURITY_SCAN_RESULTS_PATH }}/trivy-backend-image.json dagri-talk-backend:security-scan || true
        trivy image --severity HIGH,CRITICAL dagri-talk-backend:security-scan || true

        # Scan frontend container
        trivy image --format json --output ${{ env.SECURITY_SCAN_RESULTS_PATH }}/trivy-frontend-image.json dagri-talk-frontend:security-scan || true
        trivy image --severity HIGH,CRITICAL dagri-talk-frontend:security-scan || true

        # Scan filesystem
        trivy fs --format json --output ${{ env.SECURITY_SCAN_RESULTS_PATH }}/trivy-filesystem.json . || true

    - name: Container security with Snyk
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: dagri-talk-backend:security-scan
        args: --file=backend/Dockerfile --json-file-output=${{ env.SECURITY_SCAN_RESULTS_PATH }}/snyk-backend.json || true

    # ========================================================================
    # SECURITY REPORT GENERATION
    # ========================================================================
    
    - name: Generate comprehensive security report
      run: |
        cat > ${{ env.SECURITY_SCAN_RESULTS_PATH }}/security-summary.md << 'EOF'
        # D'Agri Talk Security Scan Report
        
        **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        **Triggered by:** ${{ github.actor }}
        
        ## Security Scan Summary
        
        ### 🔍 Scans Performed
        - ✅ Static Application Security Testing (SAST) with CodeQL
        - ✅ Dependency vulnerability scanning (Safety, npm audit)
        - ✅ Code security analysis (Bandit, Semgrep, ESLint Security)
        - ✅ Secrets scanning (TruffleHog, GitLeaks)
        - ✅ Infrastructure security (Checkov)
        - ✅ Container security (Trivy, Snyk, Hadolint)
        
        ### 📊 Scan Results
        
        #### Python Dependencies (Safety)
        ```
        $(cd backend && safety check --short-report 2>/dev/null || echo "No critical vulnerabilities found")
        ```
        
        #### Node.js Dependencies (npm audit)
        ```
        $(cd frontend && npm audit --audit-level=high 2>/dev/null || echo "No high-severity vulnerabilities found")
        ```
        
        #### Container Security (Trivy)
        ```
        $(trivy image --severity HIGH,CRITICAL dagri-talk-backend:security-scan 2>/dev/null | head -20 || echo "Container scan completed")
        ```
        
        ### 🛡️ Security Recommendations
        
        1. **Regular Updates**: Keep all dependencies updated to latest secure versions
        2. **Secrets Management**: Ensure no secrets are committed to repository
        3. **Container Hardening**: Use minimal base images and non-root users
        4. **Infrastructure Security**: Follow AWS security best practices
        5. **Monitoring**: Implement runtime security monitoring
        
        ### 📋 Action Items
        
        - [ ] Review and address any HIGH or CRITICAL vulnerabilities
        - [ ] Update dependencies with known security issues
        - [ ] Implement additional security controls as needed
        - [ ] Schedule regular security reviews
        
        ---
        *This report was generated automatically by the DevSecOps pipeline*
        EOF

    - name: Security quality gate
      run: |
        echo "🔒 Evaluating security scan results..."
        
        # Check for critical vulnerabilities
        CRITICAL_ISSUES=0
        
        # Check Safety results
        if [ -f "${{ env.SECURITY_SCAN_RESULTS_PATH }}/safety-report.json" ]; then
          SAFETY_ISSUES=$(jq '.vulnerabilities | length' ${{ env.SECURITY_SCAN_RESULTS_PATH }}/safety-report.json 2>/dev/null || echo "0")
          echo "Safety vulnerabilities found: $SAFETY_ISSUES"
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + SAFETY_ISSUES))
        fi
        
        # Check npm audit results
        if [ -f "${{ env.SECURITY_SCAN_RESULTS_PATH }}/npm-audit.json" ]; then
          NPM_HIGH=$(jq '.metadata.vulnerabilities.high // 0' ${{ env.SECURITY_SCAN_RESULTS_PATH }}/npm-audit.json 2>/dev/null || echo "0")
          NPM_CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' ${{ env.SECURITY_SCAN_RESULTS_PATH }}/npm-audit.json 2>/dev/null || echo "0")
          echo "npm audit high: $NPM_HIGH, critical: $NPM_CRITICAL"
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + NPM_HIGH + NPM_CRITICAL))
        fi
        
        echo "Total critical security issues: $CRITICAL_ISSUES"
        
        if [ $CRITICAL_ISSUES -gt 5 ]; then
          echo "❌ Security quality gate failed: Too many critical vulnerabilities ($CRITICAL_ISSUES)"
          echo "Please address critical security issues before proceeding"
          exit 1
        else
          echo "✅ Security quality gate passed: $CRITICAL_ISSUES critical issues (threshold: 5)"
        fi

    # ========================================================================
    # UPLOAD SECURITY ARTIFACTS
    # ========================================================================
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results-${{ github.run_number }}
        path: ${{ env.SECURITY_SCAN_RESULTS_PATH }}/
        retention-days: 30

    - name: Upload security summary to GitHub
      if: always()
      run: |
        # Create or update security issue
        if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Creating security report issue..."
          
          # This would create a GitHub issue with security results
          # Implementation depends on your preferred notification method
          echo "Security scan completed. Results uploaded as artifacts."
        fi

  # ============================================================================
  # AUTOMATED SECURITY REMEDIATION
  # ============================================================================
  
  security-remediation:
    name: 🔧 Automated Security Remediation
    runs-on: ubuntu-latest
    needs: security-comprehensive
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Automated dependency updates
      run: |
        echo "🔧 Checking for automated security fixes..."
        
        # Python dependency updates
        cd backend
        pip install --upgrade pip
        pip install pip-audit
        
        # Check for fixable vulnerabilities
        pip-audit --format=json --output=audit-results.json || true
        
        if [ -f audit-results.json ] && [ "$(jq '.vulnerabilities | length' audit-results.json)" -gt 0 ]; then
          echo "Found Python vulnerabilities that may be auto-fixable"
          # pip-audit --fix would be used here in a real scenario
        fi
        
        cd ../frontend
        npm ci
        
        # Check for npm vulnerabilities with auto-fix
        if npm audit --audit-level=moderate; then
          echo "No npm vulnerabilities found"
        else
          echo "Found npm vulnerabilities, attempting auto-fix..."
          npm audit fix --audit-level=moderate || true
          
          # Check if package files were modified
          if git diff --quiet package*.json; then
            echo "No automatic fixes applied"
          else
            echo "Automatic fixes applied to package files"
            git config --local user.email "security-bot@dagri-talk.com"
            git config --local user.name "Security Bot"
            git add package*.json
            git commit -m "fix: automated security dependency updates" || true
          fi
        fi

    - name: Create security remediation PR
      if: github.ref == 'refs/heads/develop'
      run: |
        # Check if there are any changes to commit
        if ! git diff --quiet; then
          echo "Creating security remediation PR..."
          
          BRANCH_NAME="security/automated-fixes-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          git add .
          git commit -m "fix: automated security remediation
          
          - Updated dependencies with security vulnerabilities
          - Applied automated security fixes
          - Generated by DevSecOps pipeline
          
          Closes: Security scan findings from $(date +%Y-%m-%d)"
          
          git push origin $BRANCH_NAME
          
          # Create PR using GitHub CLI (if available) or API
          echo "Security remediation branch created: $BRANCH_NAME"
          echo "Manual PR creation required for security fixes"
        else
          echo "No security fixes needed"
        fi

  # ============================================================================
  # SECURITY POLICY ENFORCEMENT
  # ============================================================================
  
  security-policy-enforcement:
    name: 🛡️ Security Policy Enforcement
    runs-on: ubuntu-latest
    needs: security-comprehensive
    
    steps:
    - name: Download security scan results
      uses: actions/download-artifact@v3
      with:
        name: security-scan-results-${{ github.run_number }}
        path: security-reports/

    - name: Enforce security policies
      run: |
        echo "🛡️ Enforcing security policies..."
        
        # Policy 1: No critical vulnerabilities in production
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Checking production security policy compliance..."
          
          # Check for critical container vulnerabilities
          if [ -f "security-reports/trivy-backend-image.json" ]; then
            CRITICAL_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-reports/trivy-backend-image.json 2>/dev/null || echo "0")
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "❌ Policy violation: $CRITICAL_VULNS critical vulnerabilities found in backend container"
              echo "Production deployment blocked due to security policy"
              exit 1
            fi
          fi
        fi
        
        # Policy 2: Secrets detection
        if [ -f "security-reports/trufflehog-secrets.json" ]; then
          SECRETS_FOUND=$(jq 'length' security-reports/trufflehog-secrets.json 2>/dev/null || echo "0")
          if [ "$SECRETS_FOUND" -gt 0 ]; then
            echo "❌ Policy violation: $SECRETS_FOUND potential secrets detected"
            echo "Please remove secrets from code before proceeding"
            exit 1
          fi
        fi
        
        # Policy 3: Infrastructure security
        if [ -f "security-reports/checkov-terraform.json" ]; then
          FAILED_CHECKS=$(jq '.results.failed_checks | length' security-reports/checkov-terraform.json 2>/dev/null || echo "0")
          if [ "$FAILED_CHECKS" -gt 10 ]; then
            echo "⚠️ Warning: $FAILED_CHECKS infrastructure security issues found"
            echo "Consider addressing infrastructure security findings"
          fi
        fi
        
        echo "✅ Security policy enforcement completed"

    - name: Generate security compliance report
      run: |
        cat > security-compliance-report.md << 'EOF'
        # Security Compliance Report
        
        **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        
        ## Policy Compliance Status
        
        ### ✅ Passed Policies
        - No critical vulnerabilities in production containers
        - No secrets detected in code repository
        - Infrastructure security baseline met
        
        ### ⚠️ Warnings
        - Review infrastructure security recommendations
        - Monitor dependency vulnerabilities
        
        ### 📋 Next Actions
        - Continue regular security scanning
        - Address any medium-severity findings
        - Update security policies as needed
        
        ---
        *Generated by DevSecOps Security Pipeline*
        EOF

    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: security-compliance-report-${{ github.run_number }}
        path: security-compliance-report.md