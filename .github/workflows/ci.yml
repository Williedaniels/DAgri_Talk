name: D'Agri Talk CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  # Backend Testing and Linting
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint backend code with flake8
      run: |
        cd backend
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run backend tests with coverage
      run: |
        cd backend
        pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing and Linting
  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint frontend code with ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Check TypeScript compilation
      run: |
        cd frontend
        npm run build
    
    - name: Run frontend tests with coverage
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
      env:
        CI: true
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security and Quality Checks
  security-checks:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Set up Python for backend security check
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies for security check
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: Check Python dependencies for security vulnerabilities
      run: |
        cd backend
        safety check

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend for production
      run: |
        cd frontend
        npm run build
    
    - name: Start backend server and wait for it to be ready
      run: |
        cd backend
        python run.py &
        # Wait for the server to be up and running
        timeout 30 bash -c 'until curl -s -f http://localhost:5000/api/knowledge/; do sleep 1; done'
      env:
        FLASK_ENV: testing
    
    - name: Run API integration tests
      run: |
        # Test API endpoints are responding
        curl -f http://localhost:5000/api/knowledge/ || exit 1
        curl -f http://localhost:5000/api/market/ || exit 1
        echo "API integration tests passed"

  # Code Quality Summary
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-checks, integration-tests]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.backend-tests.result }}" == "success" && 
              "${{ needs.frontend-tests.result }}" == "success" && 
              "${{ needs.security-checks.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "‚úÖ All quality checks passed!"
          echo "üéâ Code is ready for merge"
        else
          echo "‚ùå Quality gate failed"
          echo "Backend tests: ${{ needs.backend-tests.result }}"
          echo "Frontend tests: ${{ needs.frontend-tests.result }}"
          echo "Security checks: ${{ needs.security-checks.result }}"
          echo "Integration tests: ${{ needs.integration-tests.result }}"
          exit 1
        fi